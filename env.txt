cd D:/MyProject/PyThon/Video2Event/rpg_vid2e
conda create --name vid2e python=3.9
conda activate vid2e
pip install -r requirements.txt
conda install -y -c conda-forge pybind11 matplotlib
conda install pytorch==1.12.1 torchvision==0.13.1 torchaudio==0.12.1 cudatoolkit=11.3
pip uninstall numpy
conda install numpy==1.19.2
Linux系统下的话 python -m pip install ./esim_torch/

两个参考网站：
1.https://zhuanlan.zhihu.com/p/590827022?utm_id=0
2.https://blog.csdn.net/bettii/article/details/124479828?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167660651716800180660604%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167660651716800180660604&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-1-124479828-null-null.142^v73^control,201^v4^add_ask,239^v2^insert_chatgpt&utm_term=%20MSBUILD%20%3A%20error%20MSB1001%3A%20%E6%9C%AA%E7%9F%A5%E5%BC%80%E5%85%B3%E3%80%82&spm=1018.2226.3001.4187


Windows会出现CMAKE配置问题，具体如下：

--------------------------------------------boost库安装--------------------------------------------
第一种方式：
1.从https://sourceforge.net/projects/boost/files/boost-binaries/1.78.0/boost_1_78_0-msvc-14.2-64.exe/download下载exe文件
2.双击exe安装
3.配置环境变量
环境变量和path分别为
BOOST_INCLUDEDIR 对应 D:\TOOLKITS\BOOST\boost_1_78_0
BOOST_LIBRARYDIR 对应 D:\TOOLKITS\BOOST\boost_1_78_0\lib64-msvc-14.2
4.先在cmd中输入bootstrap并运行，然后管理员权限运行b2

其他方式见网页
https://blog.csdn.net/luozhichengaichenlei/article/details/122490831?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167696733216800182181909%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167696733216800182181909&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-122490831-null-null.142^v73^control,201^v4^add_ask,239^v2^insert_chatgpt&utm_term=win10%20boost%E5%AE%89%E8%A3%85&spm=1018.2226.3001.4187

--------------------------------------------OpenCV库安装--------------------------------------------
实践证明部分有问题，请绕道
1.下载VS2019社区版
2.OpenCV官网https://opencv.org/releases/下载OpenCV
3.Github仓库https://github.com/opencv/opencv_contrib下载对应版本的opencv_contrib
4.cmake官网https://cmake.org/download/下载cmake
5.cmake 位置设置
Where is the source code: D:/TOOLKITS/OpenCV/4.5.3/opencv/sources
Where to build the binaries: D:/TOOLKITS/OpenCV/4.5.3/opencv/Video2Event-build
6.configure中specify the generator for this project 选择VS 2019
7.更换一下几个变量，分别将路径指向虚拟环境的对应位置 : PYTHON3_EXECUTABLE、PYTHON3_INCLUDE_DIR、PYTHON3_LIBRARY、PYTHON3_NUMPY_INCLUDE_DIRS、PYTHON3_PACKAGES_PATH
PYTHON3_EXECUTABLE为D:/TOOLKITS/miniconda/envs/vid2e/python.exe
PYTHON3_INCLUDE_DIR为D:/TOOLKITS/miniconda/envs/vid2e/include
PYTHON3_LIBRARY为D:/TOOLKITS/miniconda/envs/vid2e/libs/python39.lib
PYTHON3_LIBRARY_DEBUG为D:/TOOLKITS/miniconda/envs/vid2e/libs/python39.lib
PYTHON3_NUMPY_INCLUDE_DIRS为D:/TOOLKITS/miniconda/envs/vid2e/Lib/site-packages/numpy/core/include
PYTHON3_PACKAGES_PATH为D:/TOOLKITS/miniconda/envs/vid2e/Lib/site-packages
8.configure完成后，在Search框内输入CUDA和fast，勾选三个配置 : WITH_CUDA 、OPENCV_DNN_CUDA、ENABLE_FAST_MATH，要按顺序进行
9.search框搜MODULES，在OPENCV_EXTRA_MODULES_RATH一项，添加opencv_contrib中的modules目录，
例如D:/TOOLKITS/opencv_contrib/modules
10.Search框搜world，将build_opencv_world打勾，将所有opencv的库都编译在一起不需要自己一一添加每个小模块。
11.search框搜NON，把OPENCV_ENABLE_NONFREE 打勾
11.第二次点击configure，等待下方日志显示configure done
13.如果报错CMake error: error in configuration process, project files may be invalid说明VS工具设置有问题，勾选使用C++的桌面开发和通用Windows平台开发
14.搜索框输入cuda，勾选CUDA_FAST_MATH ，CUDA_ARCH_BIN中将显卡的算力内容改成自己显卡的算力(将CUDA_ARCH_BIN中小于8.6（GeForce RTX 3090算力）的选项去掉)。 默认会从最低的3.0开始，不仅影响配置速度，而且由于最新cuda 11对 compute_30了不支持，会出现如下错误：
nvcc fatal : Unsupported gpu architecture ‘compute_30‘ 错误
解决方法就是重新回到cmake，找到CUDA_ARCH_BIN,需要把这里的3.0删掉之后再重新generate
16.再次点击configure，这次的Configuring done终于OK，然后点击Generate，稍等片刻出现Generating done！
点击Open Project，它会启动你的Visual Studio。


该部分内容参考网页
https://blog.csdn.net/Cretheego/article/details/128993920?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522169812902616800184188434%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=169812902616800184188434&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-128993920-null-null.142^v96^pc_search_result_base1&utm_term=windows%20cmake%20opencv&spm=1018.2226.3001.4187

-----------------------------------------------Eigen库安装--------------------------------------------
1. 官网http://eigen.tuxfamily.org/index.php?title=Main_Page下载.zip文件
2.使用cmake编译
Where is the source code: D/TOOLKITS/eigen-3.4.0
Where to build the binaries: D:/TOOLKITS/eigen-3.4.0/output
3.点击configure, 点击generate
4.管理员权限启动VS，打开输出路径（D:/TOOLKITS/eigen-3.4.0/output/Eigen.sln）中的Eigen.sln，然后找到INSTALL右键点击生成


详见网页
https://blog.csdn.net/OOFFrankDura/article/details/103586893?ops_request_misc=&request_id=&biz_id=102&utm_term=windows%20Eigen3&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-103586893.nonecase&spm=1018.2226.3001.4187

------------------------------------------------------------------------------------------------------------------------------------
Windows继续
1..打开D:/MyProject/PyThon/Video2Event/rpg_vid2e/esim_py/setup.py把第42行build_args += ['--', '-j']注释掉
2./rpg_vid2e/esim_py/CMakeLists.txt更换了，并且需要对应刚才安装的改三个库的路径
3.Windows系统打开cmd，conda install ninja
4.把eigen3/Eigen 和Eigen3/build/Unsupported放到eSIM_py/include文件下
我的路径是C:\Program Files (x86)\Eigen3\include\eigen3下的Eigen和unsupported文件夹
5.将Half.h，BFloat16.h，GenericPacketMathFunctions.h文件存储为Unicode格式
我的路径为D:\MyProject\PyThon\Video2Event\rpg_vid2e\esim_py\include\Eigen\src/Core/arch/Default/Half.h
具体操作为
（1）单击“工具”|“自定义”命令，弹出“自定义”对话框。
（2）单击“命令”标签，进入“命令”选项卡。
（3）在“菜单栏”下拉列表中，选择“文件”选项。
（4）单击“添加命令”按钮，弹出“添加命令”对话框。
（5）在“类别”列表中，选择“文件”选项；在“命令”列表中，选择“高级保存选项”选项。
（6）单击“确定”按钮，关闭“添加命令”对话框。
（7）选中“控件”列表中的“高级保存选项”选项，单击“上移”或者“下移”按钮，调整该命令的位置。
（8）单击“关闭”按钮，完成“高级保存选项”命令的添加操作。
（9）打开“文件”菜单下的“高级保存选项”，设置编码 Unicode（utf-8带签名）- 代码页 65001 
6.将D:\TOOLKITS\miniconda\envs\vid2e\Library\include\pybind11\eigen/matrix.h文件存储为Unicode格式，方法同上
7.pip install rpg_vid2e/esim_py/
8.应该可以啦


conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/
conda config --set show_channel_urls yes
